import React, { useState, useEffect } from 'react';
import { X, ChevronRight, ChevronLeft, Check } from 'lucide-react';

const Tutorial = ({ onClose }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [highlightElement, setHighlightElement] = useState(null);

  const tutorialSteps = [
    {
      id: 'welcome',
      title: '👋 Selamat Datang di Sistem Persuratan Desa!',
      description: 'Tutorial ini akan memandu Anda untuk menggunakan sistem berdasarkan peran Anda. Pilih workflow yang sesuai: Super Admin, Verifikator, Warga, atau Warga Universal.',
      position: 'center',
      highlight: null,
    },
    
    // ========== SUPER ADMIN WORKFLOW ==========
    {
      id: 'super-admin-intro',
      title: '👨‍💼 Panduan Super Admin',
      description: 'Sebagai Super Admin, ikuti langkah-langkah berikut untuk mengelola sistem persuratan desa dengan efektif.',
      position: 'center',
      highlight: null,
    },
    {
      id: 'super-admin-1',
      title: '⚙️ Langkah 1: Mengisi Konfigurasi Surat',
      description: 'Pertama, konfigurasikan sistem dengan mengisi data desa, kepala desa, dan pengaturan surat.',
      position: 'center',
      highlight: null,
      action: '1. Buka menu "Pengaturan"\n2. Isi Nama Desa, Alamat, dan Kode Pos\n3. Upload Logo Desa\n4. Masukkan data Kepala Desa dan TTD\n5. Klik "Simpan Konfigurasi"',
    },
    {
      id: 'super-admin-2',
      title: '📋 Langkah 2: Membuat Jenis Surat',
      description: 'Buat template surat yang akan digunakan warga untuk mengajukan permohonan.',
      position: 'center',
      highlight: null,
      action: '1. Klik menu "Jenis Surat"\n2. Klik tombol "+ Tambah Jenis Surat"\n3. Isi Nama Jenis Surat (contoh: "Surat Keterangan Domisili")\n4. Buat template dengan field yang dibutuhkan\n5. Atur format nomor surat\n6. Klik "Simpan"',
    },
    {
      id: 'super-admin-3',
      title: '📥 Langkah 3: Mereview Surat Masuk',
      description: 'Periksa surat-surat yang telah diajukan oleh warga dan diverifikasi oleh verifikator.',
      position: 'center',
      highlight: null,
      action: '1. Buka menu "Semua Surat"\n2. Lihat daftar surat yang masuk\n3. Klik pada surat untuk melihat detail\n4. Periksa kelengkapan data dan lampiran\n5. Cek status verifikasi dari verifikator',
    },
    {
      id: 'super-admin-4',
      title: '✅ Langkah 4: Menyetujui/Menolak Surat',
      description: 'Berikan keputusan akhir untuk setiap surat yang telah diverifikasi.',
      position: 'center',
      highlight: null,
      action: '1. Buka detail surat\n2. Jika data lengkap, klik tombol "Setujui"\n3. Jika ada masalah, klik "Tolak" dan isi alasan penolakan\n4. Konfirmasi keputusan Anda',
    },
    {
      id: 'super-admin-5',
      title: '🖨️ Langkah 5: Mencetak Surat',
      description: 'Cetak surat yang sudah disetujui dalam format PDF resmi.',
      position: 'center',
      highlight: null,
      action: '1. Buka surat yang statusnya "Disetujui"\n2. Klik tombol "Cetak Surat"\n3. Preview surat akan muncul\n4. Klik "Download PDF" atau langsung print',
    },
    {
      id: 'super-admin-6',
      title: '👥 Langkah 6: Membuat User',
      description: 'Tambahkan user verifikator atau admin lain untuk membantu mengelola sistem.',
      position: 'center',
      highlight: null,
      action: '1. Buka menu "Users"\n2. Klik "+ Tambah User"\n3. Isi Username, Password, dan Email\n4. Pilih Role (Verifikator/Admin)\n5. Klik "Simpan"',
    },
    {
      id: 'super-admin-7',
      title: '📇 Langkah 7: Menambah Data Warga',
      description: 'Kelola database warga desa untuk memudahkan proses pengajuan surat.',
      position: 'center',
      highlight: null,
      action: '1. Buka menu "Data Warga"\n2. Klik "+ Tambah Warga"\n3. Isi NIK, Nama, Alamat, RT/RW\n4. Lengkapi data lainnya\n5. Klik "Simpan Data Warga"',
    },
    
    // ========== VERIFIKATOR WORKFLOW ==========
    {
      id: 'verifikator-intro',
      title: '🔍 Panduan Verifikator',
      description: 'Sebagai Verifikator, Anda bertugas memverifikasi surat sebelum disetujui Super Admin. Ikuti langkah berikut.',
      position: 'center',
      highlight: null,
    },
    {
      id: 'verifikator-1',
      title: '📥 Langkah 1: Mereview Surat Masuk',
      description: 'Periksa setiap surat yang masuk dari warga dengan teliti.',
      position: 'center',
      highlight: null,
      action: '1. Buka menu "Surat"\n2. Filter surat dengan status "Menunggu Verifikasi"\n3. Klik surat untuk membuka detail\n4. Periksa kelengkapan data pemohon\n5. Verifikasi kesesuaian data dengan database\n6. Cek lampiran pendukung (jika ada)',
    },
    {
      id: 'verifikator-2',
      title: '✅ Langkah 2: Menyetujui/Menolak Surat',
      description: 'Berikan verifikasi pada surat yang telah Anda periksa.',
      position: 'center',
      highlight: null,
      action: '1. Setelah mereview surat\n2. Jika data valid, klik "Verifikasi"\n3. Jika ada kesalahan, klik "Tolak"\n4. Isi catatan atau alasan (jika perlu)\n5. Konfirmasi tindakan Anda\n6. Surat akan diteruskan ke Super Admin (jika diverifikasi)',
    },
    
    // ========== WARGA WORKFLOW ==========
    {
      id: 'warga-intro',
      title: '📝 Panduan Warga Terdaftar',
      description: 'Jika Anda warga yang sudah terdaftar, ikuti langkah berikut untuk mengajukan surat.',
      position: 'center',
      highlight: null,
    },
    {
      id: 'warga-1',
      title: '📝 Langkah 1: Membuat Surat',
      description: 'Ajukan surat sesuai kebutuhan Anda dengan mudah.',
      position: 'center',
      highlight: null,
      action: '1. Login menggunakan NIK dan Password\n2. Klik tombol "Buat Surat Baru"\n3. Pilih jenis surat yang dibutuhkan\n4. Isi formulir dengan lengkap dan benar\n5. Upload lampiran jika diperlukan\n6. Klik "Ajukan Surat"',
    },
    {
      id: 'warga-2',
      title: '� 2. Melihat Tracking/History Surat',
      description: 'Warga dapat melihat status real-time dari surat yang diajukan: Draft, Menunggu Verifikasi, Diverifikasi, Disetujui, atau Ditolak. Juga dapat melihat riwayat semua surat yang pernah diajukan.',
      position: 'center',
      highlight: null,
      action: 'Lihat status surat di dashboard atau menu Surat Saya',
    },
    {
      id: 'warga-universal-intro',
      title: '🌐 Workflow Warga Universal (Tidak Terdaftar)',
      description: 'Warga yang belum terdaftar dalam database tetap dapat mengajukan surat tanpa perlu login, dengan proses yang lebih sederhana.',
      position: 'center',
      highlight: null,
    },
    {
      id: 'warga-universal-1',
      title: '📝 1. Membuat Surat',
      description: 'Warga universal dapat langsung mengisi formulir surat tanpa login. Isi semua data yang diperlukan termasuk identitas pribadi.',
      position: 'center',
      highlight: null,
      action: 'Akses halaman publik untuk membuat surat',
    },
    {
      id: 'warga-universal-2',
      title: '🖨️ 2. Mencetak Surat',
      description: 'Setelah surat dibuat, warga universal dapat langsung mencetak surat dalam format PDF untuk keperluan administrasi.',
      position: 'center',
      highlight: null,
      action: 'Klik tombol Cetak setelah surat selesai dibuat',
    },
    {
      id: 'complete',
      title: '🎉 Selamat! Tutorial Selesai',
      description: 'Anda sudah memahami workflow sistem persuratan desa untuk semua role. Setiap peran memiliki tugas dan tanggung jawab yang berbeda untuk memastikan proses persuratan berjalan lancar. Jika butuh bantuan lagi, klik tombol "?" di pojok kanan atas.',
      position: 'center',
      highlight: null,
    },
  ];

  const currentStepData = tutorialSteps[currentStep];

  useEffect(() => {
    if (currentStepData.highlight) {
      const element = document.querySelector(currentStepData.highlight);
      if (element) {
        setHighlightElement(element);
        // Scroll to element smoothly
        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    } else {
      setHighlightElement(null);
    }
  }, [currentStep, currentStepData.highlight]);

  const handleNext = () => {
    if (currentStep < tutorialSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      handleComplete();
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSkip = () => {
    handleComplete();
  };

  const handleComplete = () => {
    localStorage.setItem('tutorialCompleted', 'true');
    onClose();
  };

  const getTooltipPosition = () => {
    if (!highlightElement) return { top: '50%', left: '50%', transform: 'translate(-50%, -50%)' };

    const rect = highlightElement.getBoundingClientRect();
    const position = currentStepData.position;

    switch (position) {
      case 'top':
        return {
          top: `${rect.top - 20}px`,
          left: `${rect.left + rect.width / 2}px`,
          transform: 'translate(-50%, -100%)',
        };
      case 'bottom':
        return {
          top: `${rect.bottom + 20}px`,
          left: `${rect.left + rect.width / 2}px`,
          transform: 'translate(-50%, 0)',
        };
      case 'left':
        return {
          top: `${rect.top + rect.height / 2}px`,
          left: `${rect.left - 20}px`,
          transform: 'translate(-100%, -50%)',
        };
      case 'right':
        return {
          top: `${rect.top + rect.height / 2}px`,
          left: `${rect.right + 20}px`,
          transform: 'translate(0, -50%)',
        };
      default:
        return {
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
        };
    }
  };

  return (
    <>
      {/* Backdrop Overlay */}
      <div className="fixed inset-0 z-[9998]">
        {/* Dark overlay with cutout for highlighted element */}
        <svg className="absolute inset-0 w-full h-full pointer-events-none">
          <defs>
            <mask id="spotlight-mask">
              <rect x="0" y="0" width="100%" height="100%" fill="white" />
              {highlightElement && (
                <rect
                  x={highlightElement.getBoundingClientRect().left - 10}
                  y={highlightElement.getBoundingClientRect().top - 10}
                  width={highlightElement.getBoundingClientRect().width + 20}
                  height={highlightElement.getBoundingClientRect().height + 20}
                  rx="12"
                  fill="black"
                />
              )}
            </mask>
          </defs>
          <rect x="0" y="0" width="100%" height="100%" fill="rgba(0, 0, 0, 0.75)" mask="url(#spotlight-mask)" />
        </svg>

        {/* Highlight Border */}
        {highlightElement && (
          <div
            className="absolute pointer-events-none animate-pulse"
            style={{
              top: `${highlightElement.getBoundingClientRect().top - 10}px`,
              left: `${highlightElement.getBoundingClientRect().left - 10}px`,
              width: `${highlightElement.getBoundingClientRect().width + 20}px`,
              height: `${highlightElement.getBoundingClientRect().height + 20}px`,
              border: '3px solid #3b82f6',
              borderRadius: '12px',
              boxShadow: '0 0 0 4px rgba(59, 130, 246, 0.3), 0 0 30px rgba(59, 130, 246, 0.5)',
            }}
          />
        )}
      </div>

      {/* Tooltip/Callout */}
      <div
        className="fixed z-[9999] max-w-md w-full mx-4"
        style={getTooltipPosition()}
      >
        <div className="bg-white rounded-2xl shadow-2xl border-2 border-blue-500 overflow-hidden animate-fade-in-scale">
          {/* Progress Bar */}
          <div className="h-2 bg-gray-200">
            <div
              className="h-full bg-gradient-to-r from-blue-500 to-purple-500 transition-all duration-500"
              style={{ width: `${((currentStep + 1) / tutorialSteps.length) * 100}%` }}
            />
          </div>

          {/* Content */}
          <div className="p-6">
            {/* Step Counter */}
            <div className="flex items-center justify-between mb-4">
              <span className="text-xs font-bold text-blue-600 bg-blue-50 px-3 py-1 rounded-full">
                Langkah {currentStep + 1} dari {tutorialSteps.length}
              </span>
              <button
                onClick={handleSkip}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <X size={20} />
              </button>
            </div>

            {/* Title */}
            <h3 className="text-xl font-bold text-gray-900 mb-3">
              {currentStepData.title}
            </h3>

            {/* Description */}
            <p className="text-gray-600 mb-4 leading-relaxed">
              {currentStepData.description}
            </p>

            {/* Action Hint */}
            {currentStepData.action && (
              <div className="bg-blue-50 border-l-4 border-blue-500 p-3 mb-4 rounded-r-lg">
                <p className="text-sm text-blue-800 font-medium">
                  💡 {currentStepData.action}
                </p>
              </div>
            )}

            {/* Navigation Buttons */}
            <div className="flex items-center justify-between gap-3 mt-6">
              <button
                onClick={handlePrevious}
                disabled={currentStep === 0}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all ${
                  currentStep === 0
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                <ChevronLeft size={18} />
                Sebelumnya
              </button>

              <div className="flex gap-1">
                {tutorialSteps.map((_, index) => (
                  <div
                    key={index}
                    className={`h-2 w-2 rounded-full transition-all ${
                      index === currentStep
                        ? 'bg-blue-500 w-6'
                        : index < currentStep
                        ? 'bg-green-500'
                        : 'bg-gray-300'
                    }`}
                  />
                ))}
              </div>

              <button
                onClick={handleNext}
                className="flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg font-medium hover:from-blue-600 hover:to-purple-600 transition-all shadow-lg hover:shadow-xl"
              >
                {currentStep === tutorialSteps.length - 1 ? (
                  <>
                    <Check size={18} />
                    Selesai
                  </>
                ) : (
                  <>
                    Lanjut
                    <ChevronRight size={18} />
                  </>
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Arrow Pointer */}
        {highlightElement && currentStepData.position !== 'center' && (
          <div
            className="absolute w-0 h-0"
            style={{
              ...(currentStepData.position === 'top' && {
                bottom: '-10px',
                left: '50%',
                transform: 'translateX(-50%)',
                borderLeft: '10px solid transparent',
                borderRight: '10px solid transparent',
                borderTop: '10px solid #3b82f6',
              }),
              ...(currentStepData.position === 'bottom' && {
                top: '-10px',
                left: '50%',
                transform: 'translateX(-50%)',
                borderLeft: '10px solid transparent',
                borderRight: '10px solid transparent',
                borderBottom: '10px solid #3b82f6',
              }),
              ...(currentStepData.position === 'left' && {
                right: '-10px',
                top: '50%',
                transform: 'translateY(-50%)',
                borderTop: '10px solid transparent',
                borderBottom: '10px solid transparent',
                borderLeft: '10px solid #3b82f6',
              }),
              ...(currentStepData.position === 'right' && {
                left: '-10px',
                top: '50%',
                transform: 'translateY(-50%)',
                borderTop: '10px solid transparent',
                borderBottom: '10px solid transparent',
                borderRight: '10px solid #3b82f6',
              }),
            }}
          />
        )}
      </div>

      {/* Custom Animations */}
      <style>{`
        @keyframes fade-in-scale {
          from {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.9);
          }
          to {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
          }
        }
        .animate-fade-in-scale {
          animation: fade-in-scale 0.3s ease-out;
        }
      `}</style>
    </>
  );
};

export default Tutorial;
